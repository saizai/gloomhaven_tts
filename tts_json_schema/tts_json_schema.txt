class SaveState { //Holds a state of the game
  string SaveName = "";
  string GameMode = "";
  string Date = "";
  string Table = "";
  string TableURL = null; //For custom large table
  string Sky = "";
  string SkyURL = null; //For custom sky
  string Note = "";
  string Rules = "";
  string PlayerTurn = "";
  GridState Grid;
  byte[] DrawImage; //PNG converted to bytes
  List<ObjectState> ObjectStates; //Object on the table
}

class ObjectState { //Moveable objects
  string Name = ""; //Internal object name
  TransformState Transform;
  string Nickname = ""; //Name supplied in game
  string Description = "";
  ColorState ColorDiffuse;
  bool Grid = true;
  bool Locked = false;
  /*Nullable to hide object specific properties and save space*/
  Nullable<bool> AltSound; //Some objects have 2 materials, with two sound sets
  Nullable<int> MaterialIndex;
  Nullable<int> MeshIndex;
  Nullable<int> Layer; //Sound Layer
  Nullable<int> Number;
  Nullable<int> CardID;
  Nullable<bool> SidewaysCard;
  Nullable<bool> RPGmode;
  Nullable<bool> RPGdead;
  string FogColor = null;
  Nullable<bool> FogHidePointers;
  List<int> DeckIDs;
  Dictionary<int, CustomDeckState> CustomDeck; //Key matches the hundreth place of the id (ex. id = 354, index = 3)
  CustomMeshState CustomMesh;
  CustomImageState CustomImage;
  ClockSaveState Clock;
  TabletState Tablet;
  List<ObjectState> ContainedObjects; //Objects in bag
  PhysicsMaterialState PhysicsMaterial; //Use to modify the physics material (friction, bounce, etc.) http://docs.unity3d.com/Manual/class-PhysicMaterial.html
  RigidbodyState Rigidbody; //Use to modify the physical properties (mass, drag, etc) http://docs.unity3d.com/Manual/class-Rigidbody.html

  bool EqualsJson(System.Object obj)
  {
    if (obj == null)
    {
      return false;
    }

    ObjectState p = obj as ObjectState;
    if ((System.Object)p == null)
    {
      return false;
    }

    string ThisJson = SaveScript.GetJsonString(this);
    string NewJson = SaveScript.GetJsonString(p);
    return ThisJson == NewJson;
  }

  ObjectState Clone()
  {
    string JsonString = SaveScript.GetJsonString(this);
    return SaveScript.GetObjectState(JsonString);
  }

  string ToJson()
  {
    return SaveScript.GetJsonString(this);
  }
}

class GridState {
  GridType Type;
  bool Lines;
  bool Snapping;
  bool Offset;
  float xSize;
  float ySize;
}

enum GridType
{
  Box, Hex
};

class TransformState {
  float posX;
  float posY;
  float posZ;

  float rotX;
  float rotY;
  float rotZ;

  float scaleX;
  float scaleY;
  float scaleZ;
}

class ColorState
{
  float r, g, b;
  ColorState(float r, float g, float b)
  {
    this.r = r;
    this.g = g;
    this.b = b;
  }
}

class RigidbodyState
{
  float Mass = 1f; //The mass of the object (arbitrary units). You should not make masses more or less than 100 times that of other Rigidbodies.
  float Drag = 0.1f; //How much air resistance affects the object when moving from forces. 0 means no air resistance, and infinity makes the object stop moving immediately.
  float AngularDrag = 0.1f; //How much air resistance affects the object when rotating from torque. 0 means no air resistance. Note that you cannot make the object stop rotating just by setting its Angular Drag to infinity.
  bool UseGravity = true; //If enabled, the object is affected by gravity.
}

class PhysicsMaterialState
{
  float DynamicFriction = 0.4f; //The friction used when already moving. Usually a value from 0 to 1. A value of zero feels like ice, a value of 1 will make it come to rest very quickly unless a lot of force or gravity pushes the object.
  float StaticFriction = 0.4f; //The friction used when an object is laying still on a surface. Usually a value from 0 to 1. A value of zero feels like ice, a value of 1 will make it very hard to get the object moving.
  float Bounciness = 0f; //How bouncy is the surface? A value of 0 will not bounce. A value of 1 will bounce without any loss of energy.
  PhysicMaterialCombine FrictionCombine = PhysicMaterialCombine.Average; //How the friction of two colliding objects is combined. 0 = Average, 1 = Minimum, 2 = Maximum, 3 = Multiply.
  PhysicMaterialCombine BounceCombine = PhysicMaterialCombine.Average; //How the bounciness of two colliding objects is combined. 0 = Average, 1 = Minimum, 2 = Maximum, 3 = Multiply.
}

class CustomDeckState {
  string FaceURL = "";
  string BackURL = "";
}

class CustomImageState {
  string ImageURL = "";
  float WidthScale;
}

class CustomMeshState {
  string MeshURL = "";
  string DiffuseURL = "";
  string NormalURL = "";
  string ColliderURL = "";
  bool Convex = true;
  int MaterialIndex = 0; //0 = Plastic, 1 = Wood, 2 = Metal.
  int TypeIndex = 0; //0 = Generic, 1 = Figurine, 2 = Dice, 3 = Coin, 4 = Board, 5 = Chip
  CustomShaderState CustomShader; //Used to override the shader
}

class CustomShaderState {

ColorState SpecularColor = new ColorState(0.9f, 0.9f, 0.9f);
  float SpecularIntensity = 0.1f;
  float SpecularSharpness = 3f; //Range: 2 – 8
  float FresnelStrength = 0.1f; //Range: 0 – 1
}

class TabletState {
  string PageURL = "";
}

class ClockSaveState {
  ClockScript.ClockState ClockState;
  int SecondsPassed = 0;
  bool Paused = false;
}

object names = [backgammon_board,, backgammon_piece_brown, backgammon_piece_white, Bag, BlockRectangle, BlockSquare, BlockTriangle, Card Facade, Card, CardBot_Board, CheckerFacade, CheckerStack, Checker_black, Checker_Board, Checker_red, Checker_white, Chess_Bishop, Chess_Board, Chess_King, Chess_Knight, Chess_Pawn, Chess_Queen, Chess_Rook, Chinese_Checkers_Board, Chinese_Checkers_Piece, ChipFacade, ChipStack, Chip_10, Chip_100, Chip_1000, Chip_50, Chip_500, Cup, Custom_Board, Custom_Model, Deck, DeckCustom, Deck_CardBot_Head, Deck_CardBot_Main, Die_10, Die_12, Die_20, Die_4, Die_6, Die_6_Rounded, Die_8, Die_Piecepack, Digital_Clock, Domino, Figurine_Card_Bot, Figurine_Custom, Figurine_Kimi_Kat, Figurine_Knil, Figurine_Mara, Figurine_Sir_Loin, Figurine_Zeke, Figurine_Zomblor, FogOfWarTrigger, Go_Board, go_game_bowl_black, go_game_bowl_white, go_game_piece_black, go_game_piece_white, LineObject, Mahjong_Coin, Mahjong_Stick, Mahjong_Tile, MarqueeTrigger, Metal Ball, Pachisi_board, PiecePack_Arms, PiecePack_Crowns, PiecePack_Moons, PiecePack_Suns, PlayerPawn, Quarter, reversi_board, reversi_chip, rpg_BEAR, rpg_CHIMERA, rpg_CYCLOP, rpg_DRAGONIDE, rpg_EVIL_WATCHER, rpg_GHOUL, rpg_GIANT_VIPER, rpg_GOBLIN, rpg_GOLEM, rpg_GRIFFON, rpg_HYDRA, rpg_KOBOLD, rpg_LIZARD_WARRIOR, rpg_MANTICORA, rpg_MUMMY, rpg_OGRE, rpg_ORC, rpg_RAT, rpg_SKELETON_KNIGHT, rpg_TREE_ENT, rpg_TROLL, rpg_VAMPIRE, rpg_WEREWOLF, rpg_WOLF, rpg_WYVERN, SearchSpaceHolder, SearchTriggerObject, Sky_Field, Sky_Forest, Sky_Museum, Sky_Tunnel, Table_Circular, Table_Custom, Table_Glass, Table_Hexagon, Table_Octagon, Table_Poker, Table_RPG, Table_Square, Tileset_Barrel, Tileset_Chair, Tileset_Chest, Tileset_Corner, Tileset_Floor, Tileset_Rock, Tileset_Table, Tileset_Tree, Tileset_Wall]