--[[List of command functions that can be activated
    ["command"] is what you put after the !, must be lower case to work
    func is the function it activates when the command is called
    desc is a description of the command's action (used by !help descriptions)
    mods are modifiers used on commands (also used by !help descriptions)
]]
ref_commandFunctions = {
    ["help"] = {
        func = function(x,y) help(x,y) end,
        desc = "Lists all commands"
    },
    ["flip"] = {
        func = function(x,y) flip(x,y) end,
        desc = "Flips the table"
    },
    ["blind"] = {
        func = function(x,y) blindfoldPlayer(x,y) end,
        desc = "Blindfolds player",
        mods = "color/name"
    },
    ["unblind"] = {
        func = function(x,y) unblindfoldPlayer(x,y) end,
        desc = "Unblindfolds player",
        mods = "color/name"
    },
    ["blindall"] = {
        func = function(x,y) blindfoldAll(x,y) end,
        desc = "Blindfolds player",
    },
    ["unblindall"] = {
        func = function(x,y) unblindfoldAll(x,y) end,
        desc = "Unblindfolds player",
    },
    ["kick"] = {
        func = function(x,y) kickPlayer(x,y) end,
        desc = "Kicks player",
        mods = "color/name"
    },
    ["promote"] = {
        func = function(x,y) promotePlayer(x,y) end,
        desc = "Promotes player",
        mods = "color/name"
    },
    ["mute"] = {
        func = function(x,y) mutePlayer(x,y) end,
        desc = "Mutes/unmutes player",
        mods = "color/name"
    },
    ["roll"] = {
        func = function(x,y) rollDice(x,y) end,
        desc = "Simulates die/dice roll",
        mods = "#/#d#"
    },
    ["player"] = {
        func = function(x,y) randomPlayer(x,y) end,
        desc = "Randomly selects player",
    },
}

--Turns on/off pinting of admin actions, and who took them, to game chat
--true is on, false is off
log = false



--End of variables to modify



function onload()
    math.randomseed(os.time())
end



--Chat monitor and function activator



--Runs any time a chat message goes off
function onChat(message, player)
    if permissionCheck(player) == true then
        if string.sub(message, 1, 1) == "!" then
            --Trim off the !, split the words into table entries
            message = string.sub(message, 2, string.len(message))
            local messageSplit = stringSplit(message, "%S+")

            --Get command name
            local commandName = ""
            if #messageSplit ~= 0 then
                commandName = string.lower(messageSplit[1])
            else
                player.broadcast("No command entered.", {0.9,0.2,0.2})
                --Kill the function if no command was entered after !
                return false
            end

            --Activate command if one exists
            if ref_commandFunctions[commandName] ~= nil then
                local modifier = ""
                if messageSplit[2] ~= nil then
                    local spaceIndex = string.find(message, " ")
                    modifier = string.sub(message, spaceIndex+1, string.len(message))
                end
                ref_commandFunctions[commandName].func(modifier, player)
            else
                player.broadcast("There is no such command: "..messageSplit[1], {0.9,0.2,0.2})
            end

            --Block the chat message from going to chat
            return false
        end
    elseif string.sub(message, 1, 1) == "!" then
        player.broadcast("You must be promoted/host to use !commands", {0.9,0.2,0.2})
    end
end



--Command functions



--Prints commands
function help(modifier, player)
    local s = "\n[b][8EE289]Admin Chip Commands[-][/b]\n"
    for command, data in pairs(ref_commandFunctions) do
        s = s .. "[2BA325]!" .. command .. "[-]"
        if data.mods != nil then
            s = s .. " [65CA5F]" .. data.mods .. "[-]"
        end
        s = s .. " [8EE289]"..string.char(10144).."[-] [i]" .. data.desc .. "[/i]\n"
    end

    player.print(s, {1,1,1})
end

--Flips table
function flip(modifier, player)
    flipTable()
    player.broadcast("TAKE THAT, TABLE!.", {1,1,1})
    if log==true then print("Table flip by: "..player.steam_name) end
end

--Blindfold player
function blindfoldPlayer(modifier, player)
    local targetPlayer = getTargetPlayer(modifier, player)
    if targetPlayer != nil then
        targetPlayer.blindfolded = true
        player.broadcast("Blindfold applied to "..targetPlayer.steam_name..".", {0.2,0.9,0.2})
        if log==true then print("Blindfold player by: "..player.steam_name) end
    end
end

--Unblindfold player
function unblindfoldPlayer(modifier, player)
    local targetPlayer = getTargetPlayer(modifier, player)
    if targetPlayer != nil then
        targetPlayer.blindfolded = false
        player.broadcast("Blindfold removed from "..targetPlayer.steam_name..".", {0.2,0.9,0.2})
        if log==true then print("Unblindfold player by: "..player.steam_name) end
    end
end

--Blindfold everyone
function blindfoldAll(modifier, player)
    for _, color in ipairs(getSeatedPlayers()) do
        Player[color].blindfolded = true
    end
    player.broadcast("Blindfold applied to all players", {0.2,0.9,0.2})
    if log==true then print("Blindfold everyone by: "..player.steam_name) end
end

--Unblindfold everyone
function unblindfoldAll(modifier, player)
    for _, color in ipairs(getSeatedPlayers()) do
        Player[color].blindfolded = false
    end
    player.broadcast("Blindfold removed from all players", {0.2,0.9,0.2})
    if log==true then print("Unblindfold everyone by: "..player.steam_name) end
end

--Kick player
function kickPlayer(modifier, player)
    local targetPlayer = getTargetPlayer(modifier, player)
    if targetPlayer != nil then
        targetPlayer.kick()
        player.broadcast("Kicking "..targetPlayer.steam_name..".", {0.2,0.9,0.2})
        if log==true then print("Kicking of "..targetPlayer.steam_name.." by: "..player.steam_name) end
    end
end

--Promote player
function promotePlayer(modifier, player)
    local targetPlayer = getTargetPlayer(modifier, player)
    if targetPlayer != nil then
        targetPlayer.promote()
        player.broadcast("Promoting "..targetPlayer.steam_name..".", {0.2,0.9,0.2})
        if log==true then print("Promotion of "..targetPlayer.steam_name.." by: "..player.steam_name) end
    end
end

--Mute player
function mutePlayer(modifier, player)
    local targetPlayer = getTargetPlayer(modifier, player)
    if targetPlayer != nil then
        targetPlayer.mute()
        player.broadcast("Muting/unmuting "..targetPlayer.steam_name..".", {0.2,0.9,0.2})
        if log==true then print("Mute of "..targetPlayer.steam_name.." by: "..player.steam_name) end
    end
end

--Simulates dice roll
function rollDice(modifier, player)
    local diceCount, diceSides = getDiceToRoll(modifier, player)
    if diceSides ~= nil then
        --Roll dice
        local total = 0
        for i=1, diceCount do
            local result = math.random(1,diceSides)
            total = total + result
        end
        broadcastToAll(player.steam_name.." rolled [65CA5F]"..diceCount.."d"..diceSides.."[-]: [ffffff]"..total.."[-]", {0.2,0.9,0.2})
        if log==true then print("Roll by: "..player.steam_name) end
    end
end

--Select a player randomly from those seated
function randomPlayer(modifier, player)
    local seatedPlayers = getSeatedPlayers()
    shuffle(seatedPlayers)
    broadcastToAll("Random player selected: "..seatedPlayers[1], stringColorToRGB(seatedPlayers[1]))
    if log==true then print("Random player by: "..player.steam_name) end
end



--Utility functions



--Check for if a player has permission to use these commands
function permissionCheck(who)
    if who.host==true or who.promoted==true then
        return true
    else
        return false
    end
end

--Splits a string at the spaces, returning a table with each word being an entry
function stringSplit(s, pattern)
    local t = {}
    for i in string.gmatch(s, pattern) do
        table.insert(t, i)
    end
    return t
end

--Obtains a target player from the string message
function getTargetPlayer(modifier, player)
    --Check that a color or player was given to the function
    if modifier != "" then
        --Check for if a color name was entered
        local colorName = getColorNameFromString(modifier)
        if colorName != nil then
            --Name entered was a color
            if Player[colorName].seated == true then
                return Player[colorName]
            else
                player.broadcast("No player was in the "..colorName.." seat.", {0.9,0.2,0.2})
            end
        else
            --Name entered was a steam name
            local playerRef = getPlayerFromString(modifier)
            if playerRef ~= nil then
                return playerRef
            else
                player.broadcast("No target match for: "..modifier, {0.9,0.2,0.2})
            end
        end
    else
        player.broadcast("No target submitted. Provide a [i]color[/i] or [i]Steam name[/i].", {0.9,0.2,0.2})
        return nil
    end
end

--Finds a color from string data (player color)
function getColorNameFromString(str)
    local messageString = string.lower(str)
    if ref_validColors[messageString] != nil then
        return (messageString:gsub("^%l", string.upper))
    else
        return nil
    end
end

--Finds a player from string data (player steam name)
function getPlayerFromString(str)
    for _, player in ipairs(Player.getPlayers()) do
        local scName = string.lower(player.steam_name)
        local find = string.find(scName, string.lower(str))
        if find ~= nil then
            return player
        end
    end
    return nil
end

--Obtains how many dice to roll and how many sides it should have
function getDiceToRoll(modifier, player)
    --Check if a die type/sides were given
    if modifier != "" then
        local dt = stringSplit(modifier, "[^Dd]+")
        local dt1, dt2 = tonumber(dt[1]), tonumber(dt[2])
        if dt1~=nil and dt2~=nil then
            return dt1, dt2
        elseif dt1~=nil then
            return 1, dt1
        else
            player.broadcast("Invalid input. Try '!roll 2d20' or '!roll 12'.", {0.9,0.2,0.2})
            return nil, nil
        end
    else
        --If not sides/type given, rolls a 1d6
        return 1, 6
    end
end

function shuffle(tbl)
    for i = #tbl, 1, -1 do
        local rand = math.random(#tbl)
        tbl[i], tbl[rand] = tbl[rand], tbl[i]
    end
    return tbl
end



--Data table



ref_validColors = {
    ["white"]=false,
    ["brown"]=false,
    ["red"]=false,
    ["orange"]=false,
    ["yellow"]=false,
    ["green"]=false,
    ["teal"]=false,
    ["blue"]=false,
    ["purple"]=false,
    ["pink"]=false,
    --["grey"]=false,
    ["black"]=false
}

--[[Ideas that didn't make it in (yet?):
    !move color color/name
        -Move the color/named player into the color seat
        -If occupied, ejects user to grey
        Problem: I need to work on my string patterns
    !team team color/name
        -Assign given color/name to given team
        Problem: Same as !move
    !ban color/name
    !unban name
        -Auto-kicks using scripting if someone gets added to the ban list
        -Allow users to be removed
        -Maybe include a !bandlist to display all the banned users
        Problem: Not sure I want to distribute that kind of thing
    !timer number
        -Does a countdown and announces when it ends
        Problem: Not sure how to display it. It could popup announcement,
                 but I don't like that much. And spawning
                 a physical timer gives me the issue of "where"
]]