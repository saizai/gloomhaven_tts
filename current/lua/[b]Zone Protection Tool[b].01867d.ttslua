--[[    Zone Protection Tool     By: MrStump
    Detailed Instructions for Setup:
        1. This chip should be spawned onto the table.
        2. Create scripting zones in areas you want to protect.
        3. SAVE THE TABLE. Load from that save.
        4. Edit the entries in protectionZoneList
            a. Every color that gets their own protected zone/zones
               is given an entry: ["Color Name"] = {}
                I.  If only the host should should be able to interact
                    then make the "Color Name" into "Admin"
            b. Then in the {}, you enter the GUID of the scripting zones
                I.  Each GUID needs to be in quotes: ""
                II. If you have more than one zone for each player, they
                    need to be seperated by a comma: {"555555", "666666"}
            c. If you want a zone where only host/promoted players may pick up
            d. After each color's entry ends, place a comma
        5. If desired, change permissionOverride to true or false
        6. Save and Apply script changes
]]

--List of zones to protect and what color it/they belong to
protectionZoneList = {
    ["White"] = {"db72a6"},
    ["Red"] = {"bfbe8e"},
    ["Green"] = {"17f75c"},
    ["Blue"] = {"15ef7c"},
    ["Admin"] = {"78fa6a"}
}

--Permission override for anyone who is host or promoted. true (on) or false (off)
permissionOverride = false


--Below this is the functional code. Only edit if you know how to script


--Startup
function onLoad()
    testToolForValidSetup()
end


--Primary functionality


--Activates any time an object is picked up
function onObjectPickedUp(pickupPlayerColor, pickupObject)
    --Check for if tool was disabled due to script error
    if shutdownTool ~= true then
        local pickedUpOwnerColorList = findZonesAnObjectIsIn(pickupObject)
        --Check for if an object was in a hand zone
        if pickedUpOwnerColorList==nil or isToolFaceUp()==false then
            --If not, end function here
            return
        else
            --If so, check if they were on the permitted list based on color/admin
            local isPlayerPermitted = false
            for _, color in ipairs(pickedUpOwnerColorList) do
                if pickupPlayerColor==color or isPlayerAdmin(pickupPlayerColor)==true then
                    isPlayerPermitted = true
                end
            end
            --Triggers the "permission denied" item force-drop
            if isPlayerPermitted == false then
                forceItemDrop(pickupPlayerColor, pickupObject)
            end
        end
    else
        return
    end
end

--Forces an item out of a player's hand and warns them
function forceItemDrop(color, obj)
    obj.reload()
    broadcastToColor("You are not permitted to pick up objects in this zone.", color, {0.9,0.2,0.2})
end


--Information fetching utility


--Checks items rotation
function isToolFaceUp()
    local z = self.getRotation().z
    if z < 10 or z > 350 then
        return true
    else
        return false
    end
end

--Checks if a given player color is host or promoted
function isPlayerAdmin(color)
    if color == "Black" then
        return true
    elseif permissionOverride==false then
        return false
    elseif Player[color].host==true or Player[color].promoted==true then
        return true
    end
    return false
end

--returns a table containing any zone/zones an object is in (or nil if none)
function findZonesAnObjectIsIn(objToFind)
    local colorList = {}
    for color, GUIDtable in pairs(protectionZoneList) do
        for _, GUID in ipairs(GUIDtable) do
            for _, obj in ipairs(getObjectFromGUID(GUID).getObjects()) do
                if obj == objToFind then
                    table.insert(colorList, color)
                end
            end
        end
    end
    if #colorList == 0 then
        return nil
    else
        return colorList
    end
end


--Shutdown check


--Tests the table to make sure it is set up in a valid way
function testToolForValidSetup()
    local validColorList = {
        "White", "Brown", "Red", "Orange", "Yellow", "Green",
        "Teal", "Blue", "Purple", "Pink", "White", "Admin"
    }
    for color, entry in pairs(protectionZoneList) do
        --Check if the color name is valid
        local colorNameWasValid = false
        for _, validColor in ipairs(validColorList) do
            if color == validColor then colorNameWasValid = true end
        end
        if colorNameWasValid == false then
            shutdownTool = true
            broadcastToAll("[b]Setup Error:[/b] The following color name in protectionZoneList is invalid: "..color, {1,0,0})
            return
        end
        --Check if the entry for color name is a table
        if type(entry) ~= "table" then
            shutdownTool = true
            broadcastToAll("[b]Setup Error:[/b] "..color.."'s entry in protectionZoneList is not a table {}.' ", {1,0,0})
            return
        end
        --Check if the entry for color name has at least 1 entry
        if #entry == 0 then
            shutdownTool = true
            broadcastToAll("[b]Setup Error:[/b] "..color.."'s entry in protectionZoneList has no valid GUIDs in it.' ", {1,0,0})
            return
        end
        --Entry checks
        for _, guid in ipairs(entry) do
            local scriptZone = getObjectFromGUID(guid)
            --Check if each guid is a valid object
            if scriptZone == nil then
                shutdownTool = true
                broadcastToAll("[b]Setup Error:[/b] Following GUID in protectionZoneList is not on the table: "..guid, {1,0,0})
                return
            end
            --Check if the guid was tied to a scripting zone or another object
            if scriptZone.tag ~= "Scripting" then
                shutdownTool = true
                broadcastToAll("[b]Setup Error:[/b] Following GUID in protectionZoneList is not the GUID of a scripting zone: "..guid, {1,0,0})
                return
            end
        end
    end
end