--[[ Deck Splitter by MrStump ]]--

--Distance used between cards. Scales with card size, probably would only need changing with special cards
cardOffset = 2.5

--[[Runs on start]]
function onload()
    deckRegistered = false
    suspendDetection = false
end

--[[Runs every time anything touches the bag (or it touches anything)]]
function onCollisionEnter(collisionInfo)
    --Get the name of the object touching the bag and check if it is that of a deck/custom deck
    local collidingObject = collisionInfo.collision_object
    local collidingObjectName = tostring(collidingObject)
    local deckType1 = 'Deck(Clone) (LuaGameObjectScript)'
    local deckType2 = 'DeckCustom(Clone) (LuaGameObjectScript)'
    if collidingObjectName == deckType1 or collidingObjectName == deckType2 then
        --Gets number of items in this tool
        local decksInBag = #self.getObjects()
        --Initializes the tool, creating variables for later use
        if decksInBag == 1 and deckRegistered == false then
            deck = collidingObject
            deckCount = deck.getQuantity()
            distanceScale = deck.getScale().x
            deckRegistered = true
            stacks = 2
            cards = math.floor(deckCount/2)
            spawnButtons()
        --Runs if you put other objects in the bag before the deck
        elseif decksInBag > 1 then
            broadcastToAll('Too many decks/objects in the deck splitting tool.\nPlease remove all objects and try again.', {1,1,1})
            resetTool()
        end
    end
end

--[[Creates the buttons]]
function spawnButtons()
    buttonParams.countDisplay.label = 'Cards In Deck: ' .. deckCount
    buttonParams.stacksDisplay.label = 'STACKS:\n' .. stacks
    buttonParams.cardsDisplay.label = 'CARDS:\n' .. cards
    for i, v in pairs(buttonParams) do
        self.createButton(v)
    end
end

--[[Clears all information]]
function resetTool()
    deckRegistered = false
    self.clearButtons()
end

--[[Watches for a deck to be removed by the player, resetting the tool.]]
function update()
    --suspendDetection is only true when the script is removing the deck(to split out cards)
    if suspendDetection == false then
        --deckRegistered is only true when 1 and only 1 deck is in the tool
        --#self.getObjects() is seeing if there are 0 decks in the tool
        if deckRegistered == true and #self.getObjects() == 0 then
            resetTool()
        end
    end
end

--[[These 4 functions are the + and - for the stacks. Sets our desired # of stacks]]
function stacksP1()
    --Makes sure we don't try to make more stacks than we have cards
    if stacks < deckCount then
        stacks = stacks + 1
        cards = math.floor(deckCount/stacks)
        buttonParams.stacksDisplay.label = 'STACKS:\n' .. stacks
        buttonParams.cardsDisplay.label = 'CARDS:\n' .. cards
        updateButtons()
    end
end
function stacksP5()
    if stacks < (deckCount - 4) then
        stacks = stacks + 5
        cards = math.floor(deckCount/stacks)
        buttonParams.stacksDisplay.label = 'STACKS:\n' .. stacks
        buttonParams.cardsDisplay.label = 'CARDS:\n' .. cards
        updateButtons()
    end
end
function stacksM1()
    --Makes sure we never go below 2 stacks.
    if stacks > 2 then
        stacks = stacks - 1
        cards = math.floor(deckCount/stacks)
        buttonParams.stacksDisplay.label = 'STACKS:\n' .. stacks
        buttonParams.cardsDisplay.label = 'CARDS:\n' .. cards
        updateButtons()
    end
end
function stacksM5()
    if stacks > 6 then
        stacks = stacks - 5
        cards = math.floor(deckCount/stacks)
        buttonParams.stacksDisplay.label = 'STACKS:\n' .. stacks
        buttonParams.cardsDisplay.label = 'CARDS:\n' .. cards
        updateButtons()
    end
end

--[[These 4 functions are the + and - for cards (number of cards in a stack).]]
function cardsP1()
    --Makes sure we can't put more cards into a pile than is possible
    if cards < math.floor(deckCount/stacks) then
        cards = cards + 1
        buttonParams.cardsDisplay.label = 'CARDS:\n' .. cards
        updateButtons()
    end
end
function cardsP5()
    if cards < (math.floor(deckCount/stacks) - 4) then
        cards = cards + 5
        buttonParams.cardsDisplay.label = 'CARDS:\n' .. cards
        updateButtons()
    end
end
function cardsM1()
    if cards > 1 then
        cards = cards - 1
        buttonParams.cardsDisplay.label = 'CARDS:\n' .. cards
        updateButtons()
    end
end
function cardsM5()
    if cards > 5 then
        cards = cards - 5
        buttonParams.cardsDisplay.label = 'CARDS:\n' .. cards
        updateButtons()
    end
end

function updateButtons()
    for i, v in pairs(buttonParams) do
        self.editButton(v)
        if i==3 then
            break
        end
    end
end

--[[Activated by button press, starts the process of pulling the deck out of the bag.
    We cannot edit items while they are in a bag (they don't exist) so this is required first.]]
function splitDeck()
    --This prevents the tool from thinking the player removed the deck (see function update())
    suspendDetection = true
    --We Figure out where the tool is and add 1 to its y axis.
    local selfPosition = self.getPosition()
    local x = selfPosition.x
    local y = selfPosition.y+2
    local z = selfPosition.z
    --This param removes the deck from the bag. The callback is a function that runs once it has existed and loaded the bag
    local deckTakeParam = {position={x,y,z}, rotation={180,0,0}, callback='dealCards', callback_owner=self}
    deck = self.takeObject(deckTakeParam)
end

--[[Callback function, triggered by the script pulling the deck out of the bag]]
function dealCards()
    --Loop, runs once for each card we want in each stack
    for i=1, cards do
        --Loop, runs once for each stack we want.
        for j=1, stacks do
            --Get own position and rotation, for positioning/rotation of cards
            local selfPosition = self.getPosition()
            local selfRotation = self.getRotation()
            --This determines their rotation relative to the tool (face down)
            local xRot = selfRotation.x
            local yRot = selfRotation.y
            local zRot = selfRotation.z
            --This determines their position relative to the tool's facing
            local x = selfPosition.x + math.sin( (90+yRot)*0.0174532 ) * ((0.8*self.getScale().x/distanceScale)+(cardOffset*j*distanceScale))-- see end of code for breakdown
            local y = selfPosition.y + 1
            local z = selfPosition.z + math.cos( (90+yRot)*0.0174532 ) * ((0.8*self.getScale().x/distanceScale)+(cardOffset*j*distanceScale))-- see end of code for breakdown
            --This sets the parameters for where to place each card
            local takeParam = {position={x,y,z}, rotation={xRot+180, yRot, zRot}}
            deck.takeObject(takeParam)
        end
    end
    deckCount = deck.getQuantity()
    if stacks > deckCount then
        stacks = deckCount
        cards = math.floor(deckCount/stacks)
    elseif deckCount < (stacks*cards) then
        cards = math.floor(deckCount/stacks)
    end
    buttonParams.countDisplay.label = 'Cards In Deck: ' .. deckCount
    buttonParams.stacksDisplay.label = 'STACKS:\n' .. stacks
    buttonParams.cardsDisplay.label = 'CARDS:\n' .. cards
    updateButtons()
    Timer.destroy(self.getGUID())
    Timer.create({identifier=self.getGUID(), function_name='afterEntry', function_owner=self, delay=0.5})
end

function afterEntry()
    suspendDetection = false
end

buttonParams = {
    countDisplay = {
        index=0, label='Cards In Deck: -', click_function='none', function_owner=self,
        position={0,0.04,0.54}, rotation={0,180,0}, width=0, height=0, font_size=60
    },
    stacksDisplay = {
        index=1, label='STACKS:\n-', click_function='none', function_owner=self,
        position={0,0.08,0.22}, rotation={0,180,0}, width=310, height=200, font_size=70
    },
    cardsDisplay = {
        index=2, label='CARDS:\n-', click_function='none', function_owner=self,
        position={0,0.08,-0.22}, rotation={0,180,0}, width=310, height=200, font_size=70
    },
    instruction = {
        label='Stacks first, Cards second', click_function='none', function_owner=self,
        position={0,0.04,-0.54}, rotation={0,180,0}, width=0, height=0, font_size=60
    },
    split = {
        label='^^^ SPLIT DECK ^^^', click_function='splitDeck', function_owner=self,
        position={-1.05,0,0}, rotation={0,-90,0}, width=580, height=65, font_size=60
    },
    stacksP1 = {
        label='+1', click_function='stacksP1', function_owner=self,
        position={-0.45,0.08,0.22}, rotation={0,180,0}, width=120, height=160, font_size=50
    },
    stacksP5 = {
        label='+5', click_function='stacksP5', function_owner=self,
        position={-0.722,0.08,0.22}, rotation={0,180,0}, width=120, height=120, font_size=50
    },
    stacksM1 = {
        label='-1', click_function='stacksM1', function_owner=self,
        position={0.45,0.08,0.22}, rotation={0,180,0}, width=120, height=160, font_size=50
    },
    stacksM5 = {
        label='-5', click_function='stacksM5', function_owner=self,
        position={0.722,0.08,0.22}, rotation={0,180,0}, width=120, height=120, font_size=50
    },
    cardsP1 = {
        label='+1', click_function='cardsP1', function_owner=self,
        position={-0.45,0.08,-0.22}, rotation={0,180,0}, width=120, height=160, font_size=50
    },
    cardsP5 = {
        label='+5', click_function='cardsP5', function_owner=self,
        position={-0.722,0.08,-0.22}, rotation={0,180,0}, width=120, height=120, font_size=50
    },
    cardsM1 = {
        label='-1', click_function='cardsM1', function_owner=self,
        position={0.45,0.08,-0.22}, rotation={0,180,0}, width=120, height=160, font_size=50
    },
    cardsM5 = {
        label='-5', click_function='cardsM5', function_owner=self,
        position={0.722,0.08,-0.22}, rotation={0,180,0}, width=120, height=120, font_size=50
    }
}

--[[ Breakdown of how I determined where to place the cards.

    local x = selfPosition.x + math.sin( (90+yRot)*0.0174532 ) * ((1.2/distanceScale)+(cardOffset*j*distanceScale))
    x is the x position of where I want the card, relative to which direction the object (self) is facing.
    math.sin(yRot*0.0174532) * distance ~~~ This is the core formula at work here. In combination with using math.cos on the z axis.
    sin+cos on x/z are converting an angle (yRot) into a direction. Then we multiply that by a distance to get an x/z.
    ((1.2/distanceScale)+(cardOffset*j*distanceScale)) ~~~ this is my distance calculation, made to scale with each card.
    the first half (1.2/distanceScale) figures out how far offset we need to make the first card, taking into account its scale.
        that way, a really huge card won't accidently go right back int othe tool.
    the second half (cardOffset*j*distanceScale) multiplies an offset (how far each pile should be from eachother) by j (j=1 for first pile, j=2 second pile ,etc)
        then we multiply that by the scale modifier so, again, big cards don't even up overlapping/smashing into eachother
    The reason for the 90+ is because without it, the cards would come out the TOP. So by adding 90, we're rotating the direction by 90 degrees clockwise.

    I hope this helps.
]]